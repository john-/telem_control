{
    pg      => 'postgresql://script@/cart',
    secrets => ['the secret lives here'],

    fan_control => {
        rate => 10,
        temp => {  # F degrees
            min => 90,
            max => 110,
        },
        speed => { # percent
            min => 20,
            max => 90,
        },
    },

    volume => 0.5,

    nodes => [
        {
            name => 'voltage',
	    rate => 3,
	    device => { type => 'I2C',
	                params => 'bus=/dev/i2c-1,addr=0x40',
			class  => 'Device::Chip::INA219',
			reader => sub { $_[0]->read_bus_voltage->get },
	                calc   => sub { return sprintf( '%.1f', $_[0]/1000 ); },
                       },
	    notify => { threshold => 5, phrase => 'Battery at %.1f volts', },
	},
        {
            name => 'current',
	    rate => 3,
	    device => { type => 'I2C',
	                params => 'bus=/dev/i2c-1,addr=0x40',
			class  => 'Device::Chip::INA219',
			reader => sub { $_[0]->read_shunt_voltage->get },
                        # 0.1 Ohm resistor.  TODO: config ina219 and use current register
	                calc   => sub { return sprintf( '%.1f', $_[0] / 0.1 / 1000 ); },
                       },
	    notify => { threshold => 40, phrase => 'Power consumption at %.1f milliamps', },
	},
        {
            name => 'case_temp',
	    rate => 3,
	    device => { type => 'I2C',
	                params => 'bus=/dev/i2c-1,addr=0x48',
			class  => 'Device::Chip::TMP102',
			reader => sub { $_[0]->read_temp->get },
	                calc   => sub { return sprintf( '%.1f', $_[0] * 1.8 + 32 ) },
                       },
	    notify => { threshold => 5, phrase => 'Case temp is %.1f degrees', },
	},
        {
            name => 'fan1',
	    rate => 3,
	    device => { type => 'I2C',
	                params => 'bus=/dev/i2c-1,addr=0x2E',
			class  => 'Device::Chip::ADT7470',
			reader => sub { $_[0]->read_fan_rpm(1)->get },
	                calc   => sub { return sprintf( '%d', $_[0] ) },
			writer => sub { $_[0]->write_duty_percent(1, $_[1])->get },
                       },
	    notify => { threshold => 200, phrase => 'Fan 1 speed is %d rpm', },
	},
        {
            name => 'fan2',
	    rate => 3,
	    device => { type => 'I2C',
	                params => 'bus=/dev/i2c-1,addr=0x2E',
			class  => 'Device::Chip::ADT7470',
			reader => sub { $_[0]->read_fan_rpm(2)->get },
	                calc   => sub { return sprintf( '%d', $_[0] ) },
			writer => sub { $_[0]->write_duty_percent(2, $_[1])->get },
                       },
	    notify => { threshold => 200, phrase => 'Fan 2 speed is %d rpm',, },
	},
	{
	    name => 'cpu_temp',
	    rate => 5,
	    device => { type => 'Sys',
	                file => '/sys/devices/virtual/thermal/thermal_zone0/temp',
			calc => sub { return sprintf( '%.1f', $_[0] /1000 * 1.8 + 32 ) },
	              },
            notify => { threshold => 5, phrase => 'Core temp is %.1f degrees', },
	},
	{
	    name => 'speed',
	    rate => 6,   # all gps positions written to file, rate controls db updates
	    device => { type => 'GPS',
	                calc => sub { return sprintf( '%.1f', $_[0] * 2.23694 ) },
	              },
            notify => { threshold => 'max', phrase => 'Max speed is %.1f', },
	},
    ],
};
	
        