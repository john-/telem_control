#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;

use Device::Chip::Adapter;

use Device::Chip::ADT7470;

use feature 'say';

my $ADAPTER     = "LinuxKernel";
my $MOUNTPARAMS = 'bus=/dev/i2c-1,addr=0x2e';

my $fan1;
my $fan2;
my $show;
GetOptions ("fan1=i" => \$fan1,
	    "fan2=i" => \$fan2,
	    "show"   => \$show)
    or die("Error in command line arguments\n");

#my $ina = Device::Chip::ADT7470->new;

#$ina->mount_from_paramstr(
#    Device::Chip::Adapter->new_from_description($ADAPTER), $MOUNTPARAMS, )->get;

use constant { FAN1 => 1,
               FAN2 => 2 };

if ($fan1) {
    $fan1 = limit($fan1);
    say "ready to set fan1 to $fan1%"
    #$ina->write_duty_percent( FAN1, $fan1 )->get;
}

if ($fan2) {
    $fan2 = limit($fan2);
    say "ready to set fan2 to $fan2%"
    #$ina->write_duty_percent( FAN2, $fan2 )->get;
}

if ($show) {
    if ($fan1 or $fan2) {
	say 'sleeping to let fans acquiesce...';
        sleep 2;
	say 'done';
    }
    my $rpm1; my $rpm2;
    #my $rpm1 = $ina->read_fan_rpm(FAN1)->get;
    #my $rpm2 = $ina->read_fan_rpm(FAN2)->get;
    say 'fan speeds are: $rpm1 and rpm2';
}



#$ina->change_config( STRT => 1 )->get;

#my %config = %{ $ina->read_config->get };
#say "STRT is now " . $config{STRT};

#$ina->write_duty( FAN1, 180 )->get;

#my $duty = $ina->read_duty(FAN1)->get;
#say "Fan duty cycle is $duty";

#$ina->write_duty_percent( FAN1, 20 )->get;
#$ina->write_duty_percent( FAN2, 20 )->get;

#$duty = $ina->read_duty_percent(FAN1)->get;
#say "Fan duty cycle is $duty%";

#my $rpm = $ina->read_fan_rpm(FAN1)->get;
#say "Fan speed is $rpm rpm";

sub limit {
    my $percent = shift;

    if ($percent < 0)   { $percent = 0 }
    if ($percent > 100) { $percent = 100 }

    return $percent;
}
